labels = c("1. Discordo plenamente",
"2.", "3.", "4.", "5.", "6.",
"7. Concordo plenamente"))})
# https://color.adobe.com/pt/create/color-wheel - Definir cores de gráficos
# Definindo um tema para facilitar a criação dos gráficos
tema <- theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.caption = element_text(hjust = 1, face = "italic"),
plot.subtitle = element_text(hjust = 0.5, face = "bold"),
legend.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
dados[ , 18:21]
#setwd("Consultoria") # Diretório na pasta criada de consultoria
dados <- read_csv("D:/Unicamp/stat/Semestre 7/dados_consultoria_modificados.csv") # Importação dos dados
#glimpse(dados)
dados <- dados %>% rename(q01 = names(dados[,18]),
q02 = names(dados[,19]),
q03 = names(dados[,20]),
q04 = names(dados[,21]),
q05 = names(dados[,22]),
q06 = names(dados[,23]),
q07 = names(dados[,24]),
q08 = names(dados[,25]),
q09 = names(dados[,26]),
q10 = names(dados[,27]),
q11 = names(dados[,28]),
q12 = names(dados[,29]),
q13 = names(dados[,30]),
q14 = names(dados[,31]),
q15 = names(dados[,32]),
q16 = names(dados[,33]),
q17 = names(dados[,34]),
q18 = names(dados[,35]),
q19 = names(dados[,36]),
q20 = names(dados[,37]),
q21 = names(dados[,38]),
q22 = names(dados[,39]),
q23 = names(dados[,40]),
q24 = names(dados[,41]),
q25 = names(dados[,42]),
q26 = names(dados[,43]),
q27 = names(dados[,44]),
q28 = names(dados[,45]),
q29 = names(dados[,46]),
q30 = names(dados[,47]),
q31 = names(dados[,48]),
q32 = names(dados[,49]),
q33 = names(dados[,50]),
q34 = names(dados[,51]),
q35 = names(dados[,52]),
q36 = names(dados[,53]))
# Transforma em factor (colunas 18 ao 21)
dados[ , 18:21] <- lapply(dados[ , 18:21], function(x){ factor(x,
levels = c(1, 2, 3, 4, 5, 6, 7),
labels = c("1. Uma pessoa não muito feliz","2.", "3.",
"4. Nem infeliz, nem feliz",
"5.", "6.", "7. Uma pessoa muito feliz"))})
lik <- likert(as.data.frame(dados[ , 18:21]))
# Transforma em factor (colunas 22 ao 28)
dados[ , 22:28] <- lapply(dados[ , 22:28], function(x){ factor(x,
levels = c(0, 1, 2, 3),
labels = c("1. Nenhuma vez","2. Vários dias", "3. Mais da metade dos dias",
"4. Quase todos os dias"))})
# Transforma em factor (colunas 29 ao 38)
dados[ , 29:38] <- lapply(dados[ , 29:38], function(x){ factor(x,
levels = c(0, 1, 2, 3),
labels = c("1. Não é verdade a meu respeito",
"2. É dificilmente verdade a meu respeito",
"3. É moderadamente verdade a meu respeito",
"4. É totalmente verdade a meu respeito"))})
# Transforma em factor (colunas 39 ao 48)
dados[ , 39:48] <- lapply(dados[ , 39:48], function(x){ factor(x,
levels = c(1, 2, 3, 4, 5),
labels = c("1. Nunca",
"2. Quase nunca",
"3. Algumas vezes",
"4. Frequentemente",
"5. Muito frequentemente"))})
# Transforma em factor (colunas 49 ao 53)
dados[ , 49:53] <- lapply(dados[ , 49:53], function(x){ factor(x,
levels = c(1, 2, 3, 4, 5, 6,7),
labels = c("1. Discordo plenamente",
"2.", "3.", "4.", "5.", "6.",
"7. Concordo plenamente"))})
# https://color.adobe.com/pt/create/color-wheel - Definir cores de gráficos
# Definindo um tema para facilitar a criação dos gráficos
tema <- theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.caption = element_text(hjust = 1, face = "italic"),
plot.subtitle = element_text(hjust = 0.5, face = "bold"),
legend.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
dados[order(dados[,18])]
dados
dados[,18]
order(dados[,18])
moda <- function(x) {
modal <- unique(x)
modal[which.max(tabulate(match(x, modal)))]
}
quadra <- dados %>% filter(`Qual a sua modalidade esportiva?` == 0)
aventura <- dados %>% filter(`Qual a sua modalidade esportiva?` == 1)
aventura <- aventura[sort(aventura[,18])]
moda <- function(x) {
modal <- unique(x)
modal[which.max(tabulate(match(x, modal)))]
}
quadra <- dados %>% filter(`Qual a sua modalidade esportiva?` == 0)
aventura <- dados %>% filter(`Qual a sua modalidade esportiva?` == 1)
tabela = sapply(quadra[, 18:53], moda)
tabela2 = sapply(aventura[, 18:53], moda)
xtable(data.frame(df1_mode = tabela, df2_mode = tabela2))
x = as.matrix(aventura[,18])
order(x)
x = x[order(x)]
x
x[count(x)]
x[nrow(x)]
x[nrow(x)/2]
nrow(x)/2
n(x)/2
x[69]
pdf("apoio.pdf", width = 15, height = 12)
dados %>%
mutate(`Qual a sua modalidade esportiva?` = ifelse(`Qual a sua modalidade esportiva?` == "0", "Esporte de quadra ou campo", "Esporte de aventura")) %>%
select(`Qual a sua modalidade esportiva?`,
`Teve ou tem apoio psicológico profissional?`) %>% table() %>% data.frame() %>%
ggplot(aes(x = Teve.ou.tem.apoio.psicológico.profissional.,
fill = Qual.a.sua.modalidade.esportiva.,
y = Freq)) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = Freq), position = position_dodge(width = 0.9),
vjust = -0.5, size = 12) +
labs(x = "Teve ou tem apoio psicológico profissional?",
y = "Contagem",
fill = "Modalidade esportiva") +
tema +
scale_fill_manual(values = c("#E98EC2","#b8e186")) +
scale_y_continuous(breaks = seq(0, 120, 20), limits = c(0, 120)) +
theme(text = element_text(size = 30))
dev.off()
moda <- function(x) {
modal <- unique(x)
modal[which.max(tabulate(match(x, modal)))]
}
mediana <- function(x, meio) {
med <- as.matrix(x)
med = med[order(med)]
med[meio]
}
quadra <- dados %>% filter(`Qual a sua modalidade esportiva?` == 0)
aventura <- dados %>% filter(`Qual a sua modalidade esportiva?` == 1)
tabela = sapply(quadra[, 18:53], c(moda, mediana(meio = 65)))
moda <- function(x) {
modal <- unique(x)
modal[which.max(tabulate(match(x, modal)))]
}
mediana1 <- function(x) {
med <- as.matrix(x)
med = med[order(med)]
med[65]
}
mediana2 <- function(x) {
med <- as.matrix(x)
med = med[order(med)]
med[69]
}
quadra <- dados %>% filter(`Qual a sua modalidade esportiva?` == 0)
aventura <- dados %>% filter(`Qual a sua modalidade esportiva?` == 1)
tabela = sapply(quadra[, 18:53], c(moda, mediana1))
mediana2 <- function(x) {
med <- as.matrix(x)
med = med[order(med)]
med[69]
}
main <- function(x){
return(c(mediana1(x),  moda(x)))
}
quadra <- dados %>% filter(`Qual a sua modalidade esportiva?` == 0)
aventura <- dados %>% filter(`Qual a sua modalidade esportiva?` == 1)
tabela = sapply(quadra[, 18:53], main())
quadra[, 18:53]
tabela = sapply(quadra[, 18:53], main())
tabela = sapply(quadra[, 18:53], moda))
tabela = sapply(quadra[, 18:53], moda)
tabela2 = sapply(aventura[, 18:53],moda )
tabela = sapply(quadra[, 18:53],mediana1)
tabela4 = sapply(aventura[, 18:53],mediana2)
tabela = sapply(quadra[, 18:53], moda)
tabela2 = sapply(aventura[, 18:53],moda )
tabela3 = sapply(quadra[, 18:53],mediana1)
tabela4 = sapply(aventura[, 18:53],mediana2)
xtable(data.frame(df1_mode = tabela, df2_mode = tabela2))
xtable(data.frame(df1_mode = tabela, df2_mode = tabela2, df3_mode = tabela3))
xtable(data.frame(df1_mode = tabela, df2_mode = tabela2, df3_mode = tabela3, df4_mode = tabela4))
xtable(data.frame(df1_mode = tabela, df2_mode = tabela2, df1_median = tabela3, df2_median = tabela4))
data = data.frame(c(c(1,1,2),c(2,2,3))
data
data = data.frame(c(c(1,1,2),c(2,2,3))
data <- data.frame(c(c(1,1,2),c(2,2,3))
data <- as.matrix(c(1,1,2,2,2,3), nrow = 2)
data
data <- as.matrix(c(1,1,2,2,2,3), ncol = 2)
data
data <- as.matrix((1,1,2,2,2,3), ncol = 2)
library(shiny); runApp('C:/Users/htosh/Documents/ME607_1S2023/ShinyApp.R')
ggplot(scree_data, aes(x = Componente, y = Variância_Explicada)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = sprintf("%.2f", Variância_Explicada)), vjust = -0.5) +
labs(x = "Componente Principal", y = "Variância Explicada") +
ggtitle("Scree Plot com Valores") +
theme_minimal()
library(tidyverse)
install.packages("HSAUR2")
library(HSAUR2)
data("USairpollution", package = "HSAUR2")
#retirando variavel resposta
X <- USairpollution[,-1]
# Calcular a matriz de correlação
cor_matrix <- cor(X)
# Arredondar os valores de correlação para 2 casas decimais
cor_matrix <- round(cor_matrix, 2)
#visualizando escala das variaveis com boxplot
boxplot(X, main = "Boxplot das Variáveis", xlab = "Variáveis", ylab = "Valores")
#Analise descritiva das variaveis
summary(X)
#Aplicando o PCA primeiramente sem padronizar as variáveis temos:
pca <- princomp(X, scale. = FALSE)
summary(pca)
# Acessar as variâncias explicadas por cada componente principal
variance <- pca$sdev^2
# Calcular as proporções de variância explicadas por cada componente principal
variance_prop <- variance / sum(variance)
# Plotar o gráfico de variância explicada por cada componente principal
barplot(variance_prop, names.arg = paste0("PC", 1:length(variance_prop)),
xlab = "Componente Principal", ylab = "Proporção de Variância Explicada")
#podemos perceber que há uma grande discrepância sendo causada pela diferença de escalas
#logo é melhor padronizar SCALE = TRUE:
scaledX <- scale(X)
pca_pad <- princomp(scaledX)
summary(pca_pad)
# Acessar as variâncias explicadas por cada componente principal
variance_pad <- pca_pad$sdev^2
# Calcular as proporções de variância explicadas por cada componente principal
variance_prop_pad <- variance_pad / sum(variance_pad)
# Plotar o gráfico de variância explicada por cada componente principal
barplot(variance_prop_pad, names.arg = paste0("PC", 1:length(variance_prop)),
xlab = "Componente Principal", ylab = "Proporção de Variância Explicada")
scree_data <- data.frame(
Componente = 1:length(variance_prop_pad),
Variância_Explicada = variance_prop_pad
)
ggplot(scree_data, aes(x = Componente, y = Variância_Explicada)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = sprintf("%.2f", Variância_Explicada)), vjust = -0.5) +
labs(x = "Componente Principal", y = "Variância Explicada") +
ggtitle("Scree Plot com Valores") +
theme_minimal()
View(cor_matrix)
vcov(X)
data("USairpollution", package = "HSAUR2")
force(USairpollution)
#retirando variavel resposta
X <- USairpollution[,-1]
X
cor_matrix <- cor(X)
cor_matrix <- round(cor_matrix, 2)
#visualizando escala das variaveis com boxplot
boxplot(X, main = "Boxplot das Variáveis", xlab = "Variáveis", ylab = "Valores")
#Analise descritiva das variaveis
summary(X)
#Aplicando o PCA primeiramente sem padronizar as variáveis temos:
pca <- princomp(X, scale. = FALSE)
#Aplicando o PCA primeiramente sem padronizar as variáveis temos:
pca <- princomp(X, scale = FALSE)
#Aplicando o PCA primeiramente sem padronizar as variáveis temos:
pca <- princomp(X,scores = FALSE)
summary(pca)
mtcars
?forecast
??forecast
install.packages('rsconnect')
rsconnect::setAccountInfo(name='h172284',
token='2C6F9B54FB985E741B7204754EE2E723',
secret='Htlo0903')
rsconnect::setAccountInfo(name='h172284',
token='2C6F9B54FB985E741B7204754EE2E723',
secret='YeNESbbouskHtZIqBICsAUa5PfEzJiQnH1H8sqJ4')
library(rsconnect)
forecast <- readRDS("Forecast.RDS")
setwd("C:/Users/htosh/Documents/ME607_1S2023")
originalTS <- readRDS('Images/OriginalTS.RDS')
Max_Temp <- readRDS('Images/MaxTemp.RDS')
Precip <- readRDS('Images/Precipitation.RDS')
Wind <- readRDS('Images/WindSpeed.RDS')
SunRad <- readRDS('Images/Sun_Radiation.RDS')
#Modelling
fit01 <- readRDS('Modelos/fit01.RDS')
fit01_box <- readRDS('Modelos/fit01_box.RDS')
fit02 <- readRDS('Modelos/fit02.RDs')
fit02_box <- readRDS('Modelos/fit02_box.RDS')
fit03 <- readRDS('Modelos/fit03.RDs')
fit03_box <- readRDS('Modelos/fit03_box.RDS')
fit04 <- readRDS('Modelos/fit04.RDs')
fit04_box <- readRDS('Modelos/fit04_box.RDS')
DailyEQM <- readRDS('Modelos/DailyEQM.RDS')
DailyEQMAlt <- readRDS('Modelos/DailyEQMAlt.RDS')
# Forecasting
forecast <- readRDS("Forecast.RDS")
forecast_plot <- readRDS("Forecast_plot.RDS")
##############################################
# Definição da interface do usuário
ui <- fluidPage(
titlePanel("Dashboard de Séries Temporais"),
#Definindo as páginas do dashboard
tabsetPanel(
tabPanel("EDA",
sidebarLayout(
sidebarPanel(
verbatimTextOutput("ACFs_PAcFs")
),
mainPanel(
plotOutput("time_series_plot"),
tabsetPanel(
tabPanel("Max Temperature",
plotOutput("MaxTemperature")),
tabPanel("Sun Radiation",
plotOutput("SunRad")),
tabPanel("Wind Speed",
plotOutput("WindSpeed")),
tabPanel("Precipitation",
plotOutput("Precipitation"))
)
)
)),
tabPanel("Proposed Models",
mainPanel(
tabsetPanel(
tabPanel("Model 0",splitLayout(
verbatimTextOutput("fit01"),
verbatimTextOutput("fit01_box")
),
plotOutput("fit01_resid")),
tabPanel("Model 1",splitLayout(
verbatimTextOutput("fit02"),
verbatimTextOutput("fit02_box")
), plotOutput("fit02_resid")),
tabPanel("Model 2",splitLayout(
verbatimTextOutput("fit03"),
verbatimTextOutput("fit03_box")
), plotOutput("fit03_resid")),
tabPanel("Model 3",splitLayout(
verbatimTextOutput("fit04"),
verbatimTextOutput("fit04_box")
), plotOutput("fit04_resid")))
)),
tabPanel("Validation",
mainPanel(
tabsetPanel(
tabPanel("Daily EQM",
plotOutput("DailyEQM")),
tabPanel("Weekly EQM",
plotOutput("DailyEQMAlt"))
))),
tabPanel("Prediction",
mainPanel(
tableOutput("Predict"),
tableOutput("Previsao"),
plotOutput("fore_plot")
))
),
theme = shinytheme("cerulean")
)
library(shiny)
library(shinythemes)
library(lubridate)
library(tidyverse)
library(tsibble)
library(fpp3)
library(forecast)
library(ggpubr)
library(kableExtra)
library(rsconnect)
originalTS <- readRDS('Images/OriginalTS.RDS')
Max_Temp <- readRDS('Images/MaxTemp.RDS')
Precip <- readRDS('Images/Precipitation.RDS')
Wind <- readRDS('Images/WindSpeed.RDS')
SunRad <- readRDS('Images/Sun_Radiation.RDS')
#Modelling
fit01 <- readRDS('Modelos/fit01.RDS')
fit01_box <- readRDS('Modelos/fit01_box.RDS')
fit02 <- readRDS('Modelos/fit02.RDs')
fit02_box <- readRDS('Modelos/fit02_box.RDS')
fit03 <- readRDS('Modelos/fit03.RDs')
fit03_box <- readRDS('Modelos/fit03_box.RDS')
fit04 <- readRDS('Modelos/fit04.RDs')
fit04_box <- readRDS('Modelos/fit04_box.RDS')
DailyEQM <- readRDS('Modelos/DailyEQM.RDS')
DailyEQMAlt <- readRDS('Modelos/DailyEQMAlt.RDS')
# Forecasting
forecast <- readRDS("Forecast.RDS")
forecast_plot <- readRDS("Forecast_plot.RDS")
##############################################
# Definição da interface do usuário
ui <- fluidPage(
titlePanel("Dashboard de Séries Temporais"),
#Definindo as páginas do dashboard
tabsetPanel(
tabPanel("EDA",
sidebarLayout(
sidebarPanel(
verbatimTextOutput("ACFs_PAcFs")
),
mainPanel(
plotOutput("time_series_plot"),
tabsetPanel(
tabPanel("Max Temperature",
plotOutput("MaxTemperature")),
tabPanel("Sun Radiation",
plotOutput("SunRad")),
tabPanel("Wind Speed",
plotOutput("WindSpeed")),
tabPanel("Precipitation",
plotOutput("Precipitation"))
)
)
)),
tabPanel("Proposed Models",
mainPanel(
tabsetPanel(
tabPanel("Model 0",splitLayout(
verbatimTextOutput("fit01"),
verbatimTextOutput("fit01_box")
),
plotOutput("fit01_resid")),
tabPanel("Model 1",splitLayout(
verbatimTextOutput("fit02"),
verbatimTextOutput("fit02_box")
), plotOutput("fit02_resid")),
tabPanel("Model 2",splitLayout(
verbatimTextOutput("fit03"),
verbatimTextOutput("fit03_box")
), plotOutput("fit03_resid")),
tabPanel("Model 3",splitLayout(
verbatimTextOutput("fit04"),
verbatimTextOutput("fit04_box")
), plotOutput("fit04_resid")))
)),
tabPanel("Validation",
mainPanel(
tabsetPanel(
tabPanel("Daily EQM",
plotOutput("DailyEQM")),
tabPanel("Weekly EQM",
plotOutput("DailyEQMAlt"))
))),
tabPanel("Prediction",
mainPanel(
tableOutput("Predict"),
tableOutput("Previsao"),
plotOutput("fore_plot")
))
),
theme = shinytheme("cerulean")
)
# Definição do servidor
server <- function(input, output) {
output$time_series_plot <- renderPlot({originalTS})
output$MaxTemperature <- renderPlot({Max_Temp})
output$SunRad <- renderPlot({SunRad})
output$WindSpeed <- renderPlot({Wind})
output$Precipitation <- renderPlot({Precip})
output$ACFs_PAcFs <- renderPrint({paste('sexo')})
output$fit01 <- renderPrint({report(fit01)})
output$fit01_box <- renderPrint({fit01_box})
output$fit01_resid <- renderPlot({fit01 |> gg_tsresiduals()})
output$fit02 <- renderPrint({report(fit02)})
output$fit02_box <- renderPrint({fit02_box})
output$fit02_resid <- renderPlot({fit02 |> gg_tsresiduals()})
output$fit03 <- renderPrint({report(fit03)})
output$fit03_box <- renderPrint({fit03_box})
output$fit03_resid <- renderPlot({fit03 |> gg_tsresiduals()})
output$fit04 <- renderPrint({report(fit04)})
output$fit04_box <- renderPrint({fit04_box})
output$fit04_resid <- renderPlot({fit04 |> gg_tsresiduals()})
output$DailyEQM <- renderPlot({DailyEQM})
output$DailyEQMAlt <- renderPlot({DailyEQMAlt})
output$Predict <- function(){
forecast %>%
filter(Days == "Today") %>%
mutate(predictions = paste0(round(predictions,1),"ºC")) %>%
pivot_wider(names_from = Days, values_from = predictions) %>%
knitr::kable("html") %>%
kable_styling("striped", full_width = F) %>%
row_spec(which(forecast$Days == "Today"), bold = T, color = "white", background = "red")
}
output$Previsao <- function(){
forecast %>%
filter(Days != "Today") %>%
mutate(predictions = paste0(round(predictions,1),"ºC")) %>%
pivot_wider(names_from = Days, values_from = predictions) %>%
knitr::kable("html") %>%
kable_styling("striped", full_width = F) %>%
column_spec(1, color = "black", background ="lightblue")
#row_spec(which(forecast$Days == "Tomorrow"), bold = T, color = "white", background = "orange")
}
output$fore_plot <- renderPlot({forecast_plot})
}
# Execução do aplicativo Shiny
deployApp()
shinyApp(ui = ui, server = server)
deployApp()
